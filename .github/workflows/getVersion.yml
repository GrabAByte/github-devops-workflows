---
name: Get Version
'on':
  workflow_call:
    inputs:
      metadataFile:
        required: true
        type: string
      metadataPath:
        required: true
        type: string

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Bump Artifact Version
        run: |
          # Gather current metadata
          PROJECT_NAME=$(grep name ${{ inputs.metadataPath }}/${{ inputs.metadataFile }} | head -1 | cut -d ':' -f2 | tr -d ' ",')
          CURRENT_VERSION=$(grep -w version ${{ inputs.metadataPath }}/${{ inputs.metadataFile }} | cut -d ':' -f2 | tr -d ' ",')

          # This directory will never be present due to the ephemeral nature of the hosted agents
          mkdir metadata
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> metadata/version.sh

          # Get the commit type from the commit message format
          GIT_COMMIT_TYPE=$(git log -1 --oneline | cut -d ' ' -f2)

          # Gathering the version by each octet
          MAJOR_VERSION=$(echo ${CURRENT_VERSION} | cut -d '.' -f1)
          MINOR_VERSION=$(echo ${CURRENT_VERSION} | cut -d '.' -f2)
          PATCH_VERSION=$(echo ${CURRENT_VERSION} | cut -d '.' -f3)

          # A small number of commit types for now
          case "${GIT_COMMIT_TYPE}" in
            breaking*)
              MAJOR_VERSION=$(( $(echo ${MAJOR_VERSION} | cut -d '.' -f1) + 1 ))
              FUTURE_VERSION="${MAJOR_VERSION}.0.0"
            ;;
            feat*)
              MINOR_VERSION=$(( $(echo ${MINOR_VERSION} | cut -d '.' -f2) + 1 ))
              FUTURE_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.0"
            ;;
            fix*|chore*|docs*)
              PATCH_VERSION=$(( $(echo ${PATCH_VERSION} | cut -d '.' -f2) + 1 ))
              FUTURE_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
            ;;
            Merge*)
              :
            ;;
            *)
             echo "Pipeline Aborted: Please follow the commit message naming convention. All commit messages must start with breaking, feat, fix, chore or docs"
             exit 1
            ;;
          esac

          # Set to working towards version based off the commit message
          if [ $GITHUB_REF_NAME != main ]; then
            FUTURE_VERSION="development-rc$GITHUB_RUN_ID"
          fi

          # Construct the git commit message format
          GIT_COMMIT_ID=$(git log -1 --oneline | cut -d ' ' -f1)
          GIT_COMMIT_MESSAGE=$(git log -1 --oneline | cut -d ' ' -f3-)
          FINAL_COMMIT_MESSAGE="${GIT_COMMIT_TYPE} (${GIT_COMMIT_ID}) ${GIT_COMMIT_MESSAGE}"

          echo "PROJECT_NAME=${PROJECT_NAME}" >> metadata/version.sh
          echo "FUTURE_VERSION=${FUTURE_VERSION}" >> metadata/version.sh
          echo "GIT_COMMIT_MESSAGE=\"${FINAL_COMMIT_MESSAGE}\"" >> metadata/version.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: version.sh
          path: metadata
          retention-days: 1
